# Set the version number below
AC_INIT(gnatcoll,18.0w,report@adacore.com,gnatcoll)
AC_CANONICAL_SYSTEM

TARGET=""
if test x$host != x$target ; then
   TARGET=${target}
fi

case $target in
   *cygwin*|*mingw*)
      GNATCOLL_OS="windows"
      RSS_LIBS="-lpsapi"    # Needed for gnatcoll-memory
      ;;

   *) GNATCOLL_OS="unix"
      RSS_LIBS=""
      ;;
esac
AM_TO_GPR($RSS_LIBS, RSS_LIBS_GPR)
AC_SUBST(TARGET)
AC_SUBST(GNATCOLL_OS)

# Configure pkg-config so that it does not remove some directories
# from the include files. In particular, without this, on OSX we
# never get the directory that contains py-gobject.h
PKG_CONFIG_ALLOW_SYSTEM_CFLAGS=True
PKG_CONFIG_ALLOW_SYSTEM_LIBS=True
export PKG_CONFIG_ALLOW_SYSTEM_CFLAGS PKG_CONFIG_ALLOW_SYSTEM_LIBS

AC_PROG_LN_S
AC_SYS_POSIX_TERMIOS   # in terminals.c, getting size of terminal
AC_HEADER_TIOCGWINSZ

AC_ARG_ENABLE(gpl,
  [AC_HELP_STRING(
     [--enable-gpl],
     [Include GPL packages (readline)])],
  WITH_GPL=$enableval,
  WITH_GPL=no)
AC_SUBST(WITH_GPL)

CHECK_BUILD_TYPE
AM_GNAT_BUILDS_SHARED
AM_ENABLE_STATIC_PIC
AM_SO_SUFFIX
AM_PATH_PYTHON
AM_MMAP
AM_PATH_POSTGRES
AM_PATH_SQLITE
AM_PATH_GMP
AM_PATH_ICONV
AM_GNAT_SOURCES
AM_CHECK_READLINE
AM_PROJECTS
AM_XREF
AM_SYSTEM_LINK_SWITCHES
AM_HAS_INTRINSIC_SYNC_COUNTERS
AM_TO_GPR($GMP_CFLAGS,    GMP_CFLAGS_GPR)
AM_TO_GPR($GMP_LIBS,      GMP_LIBS_GPR)
AM_TO_GPR($PYTHON_SHARED_LIBS,   PYTHON_SHARED_LIBS_GPR)
AM_TO_GPR($PYTHON_STATIC_LIBS,   PYTHON_STATIC_LIBS_GPR)
AM_TO_GPR($PYTHON_CFLAGS, PYTHON_CFLAGS_GPR)
AM_TO_GPR($LIB_PQ,        LIB_PQ_GPR)

AM_PATH_SYSLOG

LIB=`basename $libdir`
AC_SUBST(LIB)

if test "$WITH_PROJECTS" = "no" ; then
   prj=src/gnatcoll__nogpr.gpr
else
   prj=src/gnatcoll__libgpr.gpr
fi

rm -f "src/gnatcoll.gpr"
cp -f "$prj" "src/gnatcoll.gpr"

AC_OUTPUT(gnatcoll_shared.gpr Makefile.conf)

AC_MSG_NOTICE([--------- Summary for GNAT Components --------------])
AC_MSG_NOTICE(AC_HELP_STRING(
              [Shared libraries:],[$GNAT_BUILDS_SHARED (default: $DEFAULT_LIBRARY_TYPE)]))
AC_MSG_NOTICE(AC_HELP_STRING(
              [Static PIC libraries:],[$ENABLE_STATIC_PIC (see --enable-static-pic)]))
AC_MSG_NOTICE(AC_HELP_STRING(
              [Python:],[$WITH_PYTHON $PYTHON_BASE (see --with-python)]))
AC_MSG_NOTICE(AC_HELP_STRING(
              [Syslog:],[$WITH_SYSLOG (see --enable-syslog)]))
AC_MSG_NOTICE(AC_HELP_STRING(
              [Readline (GPL license):],
              [$WITH_READLINE (see --with-readline --enable-gpl)]))
AC_MSG_NOTICE(AC_HELP_STRING(
              [gmp:],[$WITH_GMP (see --with-gmp)]))
AC_MSG_NOTICE(AC_HELP_STRING(
              [PostgreSQL:],[$WITH_POSTGRES $PATH_LIBPQ (see --with-postgresql)]))
AC_MSG_NOTICE(AC_HELP_STRING(
              [Sqlite:],[$WITH_SQLITE $PATH_LIBSQLITE (see --with-sqlite)]))
AC_MSG_NOTICE(AC_HELP_STRING(
              [Iconv:],[$WITH_ICONV (see --with-iconv)]))
AC_MSG_NOTICE(AC_HELP_STRING(
              [Projects:],[$WITH_PROJECTS]))
if test $WITH_PROJECTS = no; then
AC_MSG_NOTICE(AC_HELP_STRING(
              [],[install libgpr to override]))
fi
AC_MSG_NOTICE(AC_HELP_STRING(
              [Xref:],[$WITH_XREF]))
AC_MSG_NOTICE([--------------------------------------------])
