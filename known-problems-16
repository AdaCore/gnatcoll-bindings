==============================
Known Problems in Gnatcoll 1.6
==============================

Copyright (C) 2013-2014, AdaCore

KP-16-N626-001 GNATCOLL.SQL.Postgres quotes connection parameters

  Problem:    It is now possible to use backslashes, spaces and quotes in
              passwords and other connection parameters.

  Status:     Fixed in Gnatcoll 1.7.0 on 2014-06-26

  Workaround: Do the escaping of the special characters before you pass them
              to GNATCOLL.SQL.Postgres.Setup.

KP-16-N530-001 GNATCOLL.SQL.Postgres stack usage

  Problem:    Executing a SQL query with postgres, and passing a large
              string parameter, copies this string on the stack, although
              the copy is not needed.

  Status:     Fixed in Gnatcoll 1.7.0 on 2014-06-02

  Workaround: This impacts efficiency, not correctness.

KP-16-N527-001 GNATCOLL.SQL.Postgres handling of localhost

  Problem:    For historical reasons, GNATCOLL was not replacing the
              name of the host "localhost" with an empty string when
              connecting to postgreSQL. This changes the protocol used
              by postgreSQL and creates an element of surprise for
              users of the API.
              Existing code can be adapted by replacing "localhost" with
              "" directly in the application code.

  Status:     Fixed in Gnatcoll 1.7.0 on 2014-05-27

  Workaround: Connect with 127.0.0.1 rather than "localhost".

KP-16-N108-033 GNATCOLL.JSON fails to escape U+0080

  Problem:    GNATCOLL.JSON.Write fails to escape a reference to Unicode
              codepoint U+0080 from an UTF-8 string as \u0080.

  Status:     Fixed in Gnatcoll 1.7.0

  Workaround: Replace any occurrence of character 16#80# in generated
              JSON strings with "\u0080".

KP-16-MB29-017 GNATCOLL.JSON crashes decoding high Unicode codepoints

  Problem:    GNATCOLL.JSON.Read raises Constraint_Error when processing
              a string literal containing an encoded reference to a Unicode
              codepoint beyond U+7FFF (e.g. "\uA726").

  Status:     Fixed in Gnatcoll 1.7.0

  Workaround: None

KP-16-MB28-001 Stack usage issues with the JSON stream decoder

  Problem:    The stack usage of the JSON serializer/deserializer is too high
              when working on very large JSON string values, and JSON object's
              key values.

  Status:     Fixed in Gnatcoll 1.7.0

  Workaround: None

KP-16-MB19-040 gnatcoll_db2ada: fix handling of 'numeric(x,y)'

  Problem:    When a database schema contains a 'numeric(x,y)' type, that
              type needs to be mapped either to an integer or to a float on
              the Ada side. So far, gnatcoll_db2ada was always mapping to
              integers.

  Status:     Fixed in Gnatcoll 1.7.0 on 2013-11-20

  Workaround: Export the schema to a txt file, and replace the types
              manually in that file. It is in any case better than extracting
              the schema from a live database, because you can put it under
              revision control.

KP-16-MB05-053 GNATCOLL.Email.Get_Param incorrect handling of semicolons

  Problem:    When the header Content-Disposition references a filename that
              contains a semicolon, that name is truncated if you use
              Get_Param to read it.

  Status:     Fixed in Gnatcoll 1.7.0 on 2014-02-05

  Workaround: Get the full value of the header, and parse it directly,
              ignoring semicolons within quotes.

KP-16-M926-004 gnatcoll.gpr conflicts with OS environment variable

  Problem:    The project files installed by gnatcoll depends on an
              environment variable named OS, with a restricted set of
              allowed values. This name is too generic and might conflict
              with similar variables used in user projects.

  Status:     Fixed in Gnatcoll 1.7.0

  Workaround: edit prefix/lib/gnat/gnatcoll.gpr and replace "OS" with
              "GNATCOLL_OS".
