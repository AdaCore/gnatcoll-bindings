workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: always
    - if: $CI_PIPELINE_SOURCE == "schedule"
      when: always
    - if: $CI_PIPELINE_SOURCE == "web"
      when: always
    - when: never

stages:
  - build

default:
  before_script: |
    echo "before script executing..."

    #######################
    ## colored execution ##
    #######################

    exec() {
       # dark green + $ + command line + grey
       echo -e "\e[0;32m\$ $@\e[0;37m"
       $@
       # save the result
       res=$?
       # back to normal output
       echo -e -n "\e[0m"
       # make sure we translate the exit code
       return $res
    }

    # Enable generic CI for building with Anod

    cmd="generic_anod_ci"

    # generic anod ci requires --continuous-builder-mode when not run in a
    # MR context
    if [[ $CI_PIPELINE_SOURCE != "merge_request_event" ]]; then
      cmd="$cmd --continuous-builder-mode"
    fi

    exec eval $cmd
    echo "sourcing the generic CI environment"
    . /tmp/ci_env.sh

    # generic_anod_ci modifies the rebuild strategy of anod.
    # Set it back to full, so we do not rebuild the packages depending
    # on gnatcoll-core and contained in GNAT.
    exec anod tune --full
    exec anod vcs --list

########
# JOBS #
########

build_and_test_py39:
  services:
    - image:e3
    - cpu:2
  stage: build
  script:
    - anod vcs --add-repo gnatcoll-bindings $CI_PROJECT_DIR
    - anod build --latest gnatcoll-bindings -Qpython=3.9
    - BS=`anod info build gnatcoll-bindings -Qpython=3.9 --show build_space`
    - eval `anod printenv gnatcoll-bindings -Qpython=3.9 --build-env`
    - export GPR_PROJECT_PATH=/tmp/it/wave/x86_64-linux/$BS/install/share/gpr:$GPR_PROJECT_PATH
    - export ADA_PYTHON_HOME=/tmp/it/wave/x86_64-linux/tp-python_3.9/install
    - ls /tmp/it/wave/x86_64-linux/$BS/install/share/gpr || ls -R /tmp/it/wave/x86_64-linux/
    - cd $CI_PROJECT_DIR/python3/tests && /it/e3/bin/python ./testsuite.py -v

build_and_test_py310:
  services:
    - image:e3
    - cpu:2
  stage: build
  script:
    - anod vcs --add-repo gnatcoll-bindings $CI_PROJECT_DIR
    - anod build --latest gnatcoll-bindings -Qpython=3.10
    - BS=`anod info build gnatcoll-bindings -Qpython=3.10 --show build_space`
    - eval `anod printenv gnatcoll-bindings -Qpython=3.10 --build-env`
    - export GPR_PROJECT_PATH=/tmp/it/wave/x86_64-linux/$BS/install/share/gpr:$GPR_PROJECT_PATH
    - export ADA_PYTHON_HOME=/tmp/it/wave/x86_64-linux/tp-python_3.10/install
    - cd $CI_PROJECT_DIR/python3/tests && /it/e3/bin/python ./testsuite.py -v

build_and_test_py311:
  services:
    - image:e3
    - cpu:2
  stage: build
  script:
    - anod vcs --add-repo gnatcoll-bindings $CI_PROJECT_DIR
    - anod build --latest gnatcoll-bindings -Qpython=3.11
    - BS=`anod info build gnatcoll-bindings -Qpython=3.11 --show build_space`
    - eval `anod printenv gnatcoll-bindings -Qpython=3.11 --build-env`
    - export GPR_PROJECT_PATH=/tmp/it/wave/x86_64-linux/$BS/install/share/gpr:$GPR_PROJECT_PATH
    - export ADA_PYTHON_HOME=/tmp/it/wave/x86_64-linux/tp-python/install
    - cd $CI_PROJECT_DIR/python3/tests && /it/e3/bin/python ./testsuite.py -v

build_and_test_py312:
  services:
    - image:e3
    - cpu:2
  stage: build
  script:
    - anod vcs --add-repo gnatcoll-bindings $CI_PROJECT_DIR
    - anod build --latest gnatcoll-bindings -Qpython=3.12
    - BS=`anod info build gnatcoll-bindings -Qpython=3.12 --show build_space`
    - eval `anod printenv gnatcoll-bindings -Qpython=3.12 --build-env`
    - export GPR_PROJECT_PATH=/tmp/it/wave/x86_64-linux/$BS/install/share/gpr:$GPR_PROJECT_PATH
    - export ADA_PYTHON_HOME=/tmp/it/wave/x86_64-linux/tp-python_3.12/install
    - cd $CI_PROJECT_DIR/python3/tests && /it/e3/bin/python ./testsuite.py -v

