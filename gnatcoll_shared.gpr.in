abstract project GnatColl_Shared is
   Version := "@PACKAGE_VERSION@";
   Name    := "@PACKAGE_TARNAME@";

   for Source_Dirs use ();
   for Object_Dir use "obj";
   for Library_dir use "lib";

   type Build_Type is ("Debug", "Production");
   Build : Build_Type := External ("Gnatcoll_Build", "@BUILD_TYPE@");

   Processors := External ("PROCESSORS", "1");

   type Yes_No is ("yes", "no");
   Gtk    : Yes_No := External ("GTK", "@WITH_GTK@");
   Python : Yes_No := External ("PYTHON", "@WITH_PYTHON@");
   Syslog : Yes_No := External ("SYSLOG", "@WITH_SYSLOG@");
   Postgres : Yes_No := External ("POSTGRES", "@WITH_POSTGRES@");
   type Sqlite_Inclusion is ("yes", "no", "embedded");
   Sqlite   : Sqlite_Inclusion := External ("SQLITE", "@WITH_SQLITE@");
   Gmp      : Yes_No := External ("GMP", "@WITH_GMP@");
   Projects : Yes_No := External ("PROJECTS", "@WITH_PROJECTS@");
   PyGobject : Yes_No := External ("PYGOBJECT", "@WITH_PYGOBJECT@");
   Readline : Yes_No := External ("READLINE", "@WITH_READLINE@");
   Mmap     : Yes_No := External ("MMAP", "@WITH_MMAP@");
   Iconv : Yes_No := "@WITH_ICONV@";
   Templates : Yes_No := "no";  --  Hard-coded for now
   Postgres_Has_PQprepare : Yes_No :=
      External ("HAS_PQPREPARE", "@HAS_PQPREPARE@");

   So_Ext := "@SO_EXT@";

   type Library_Type_Type is ("relocatable", "static");
   Library_Type : Library_Type_Type :=
     external ("LIBRARY_TYPE", "@DEFAULT_LIBRARY_TYPE@");

   type OS_Kind is ("Windows_NT", "unix");
   OS : OS_Kind := external ("OS", "unix");

   Python_Version := "@PYTHON_VERSION@";
   Python_Base    := "@PYTHON_BASE@";
   Python_Cflags  := (@PYTHON_CFLAGS_GPR@);
   Pygtk_Include  := (@PYGTK_INCLUDE_GPR@);
   Pygobject_Include := (@PYGOBJECT_INCLUDE_GPR@);
   Python_Dir     := "@PYTHON_DIR@";
   Python_Libs    := (@PYTHON_LIBS_GPR@);
   Gtk_Include    := (@GTK_GCC_FLAGS_GPR@);
   Gtk_Libs       := (@GTK_GCC_LIBS_GPR@);
   Postgres_Dir   := "@PATH_LIBPQ@";
   Postgres_Lib   := (@LIB_PQ_GPR@);
   Sqlite_Dir     := "@PATH_LIBSQLITE@";
   Iconv_Dir      := "@PATH_ICONV@";
   Iconv_Lib      := "@LIB_ICONV@";
   Iconv_Include  := "@INCLUDE_ICONV@";
   Sqlite_Switches := (@SQLITE_CFLAGS@);
   Rss_Libs        := (@RSS_LIBS_GPR@);   --  For gnatcoll.memory

   type Atomics_Kind is ("intrinsic", "mutex");
   Atomics : Atomics_Kind := "@SYNC_COUNTERS_IMPL@";

   package Compiler is
      case Build is
         --  It is tempting to compile all packages with -gnat12, but this
         --  means that a user project that explicitly uses -gnat05 would no
         --  longer be able to use GNATCOLL without upgrading to -gnat12.
         --  Not worth the trouble, having an explicit pragma Ada_2012 is easy
         --  enough in GNATCOLL.
         when "Debug" =>
            for Switches ("Ada") use
              ("-g", "-O0", "-gnatVa", "-gnatQ", "-gnaty", "-gnateE",
               "-gnatwaCJe", "-gnat05");

            --  Disable -gnata pending O525-006, since assertions checks are
            --  not compatible with disabling tampering checks

            for Switches ("C") use ("-g", "-fdump-xref", "-Wunreachable-code");
         when "Production" =>
            for Switches ("Ada") use
              ("-O2", "-gnatn", "-gnatws", "-gnat05");
            for Switches ("C") use ("-O2", "-Wunreachable-code");
      end case;

      case Syslog is
         when "yes" =>
            for Switches ("C") use Compiler'Switches ("C") & ("-DHAVE_SYSLOG");
         when "no" =>
            null;
      end case;

      case Mmap is
         when "yes" =>
            for Switches ("C") use Compiler'Switches ("C") & ("-DHAVE_MMAP");
         when "no" =>
            null;
      end case;
   end Compiler;

   --  Force Iconv_Dir first, so that on OSX we do not pick up macports
   --  broken libiconv, which prevents linking applications
   System_Linker_Flags := (Iconv_Dir) & (@EXTRA_LINK_SWITCHES@);
   package Linker is
      for Switches ("Ada") use System_Linker_Flags;
   end Linker;

   package Binder is
      case Build is
         when "Debug" =>
            for Switches ("Ada") use ("-E");
         when "Production" =>
            null;
      end case;
   end Binder;

   package Builder is
      for Switches ("Ada") use ("-m", "-j" & Processors);
      case Build is
         when "Debug" =>
            for Global_Configuration_Pragmas use "gnat_debug.adc";
         when "Production" =>
            null;
      end case;
   end Builder;

   package Ide is
      for VCS_Kind use "Git";
   end Ide;

end GnatColl_Shared;
